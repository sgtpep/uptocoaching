#!/usr/bin/env node
const UglifyJS = require('uglify-js');
const autoprefixer = require('autoprefixer');
const child_process = require('child_process');
const csso = require('csso');
const fs = require('fs');
const postcss = require('postcss');
const postcssImport = require('postcss-import');
const postcssURL = require('postcss-url');
const posthtml = require('posthtml');
const posthtmlInlineAssets = require('posthtml-inline-assets');
const rollup = require('rollup');
const rollupBabel = require('rollup-plugin-babel');
const rollupCommonJS = require('rollup-plugin-commonjs');
const rollupNodeResolve = require('rollup-plugin-node-resolve');

const cache = { scripts: {}, styles: {} };

const filterMime = (mime, file) =>
  file.endsWith('.svg') ? 'image/svg+xml' : mime;

const indices = () =>
  child_process
    .spawnSync(
      'find',
      [
        '-type',
        'f',
        '-name',
        'index.html',
        '!',
        '-regex',
        String.raw`\./\(\..+\|node_modules\)/.+`,
      ],
      { encoding: 'utf8' },
    )
    .stdout.split('\n')
    .slice(0, -1);

const main = () =>
  indices().reduce(
    (promise, index) =>
      promise.then(
        () => processHTML(index),
        error => {
          console.error(error);
          process.exit(1);
        },
      ),
    Promise.resolve(),
  );

const parseStyle = style =>
  style
    .split(';')
    .map(declaration =>
      declaration.split(':', 2).map(component => component.trim()),
    );

const processHTML = index =>
  posthtml([
    posthtmlInlineAssets({
      errors: 'throw',
      transforms: {
        image: { resolve: resolveImage, transform: transformImage },
        inlineScript: {
          resolve: resolveInlineScript.bind(null, index),
          transform: transformInlineScript,
        },
        inlineStyle: {
          resolve: resolveInlineStyle.bind(null, index),
          transform: transformInlineStyle,
        },
        script: { resolve: resolveScript, transform: transformScript },
        style: { resolve: resolveStyle, transform: transformStyle },
      },
    }),
  ])
    .process(fs.readFileSync(index))
    .then(result => fs.writeFileSync(index, result.html));

const processScript = (script, from, callback) => {
  if (script in cache.scripts) {
    callback(cache.scripts[script]);
  } else {
    return rollup
      .rollup({
        input: from,
        plugins: [
          rollupBabel({
            exclude: 'node_modules/**',
            presets: [['@babel/env', { useBuiltIns: 'usage' }]],
          }),
          rollupCommonJS(),
          rollupNodeResolve(),
          {
            load: id => (id === from ? script : undefined),
            resolveId: id => (id === from ? id : undefined),
          },
        ],
      })
      .then(bundle => bundle.generate({ format: 'iife' }))
      .then(output => {
        cache.scripts[script] = UglifyJS.minify(output.code).code;
        callback(cache.scripts[script]);
      });
  }
};

const processStyle = (style, from, callback) => {
  if (style in cache.styles) {
    callback(cache.styles[style]);
  } else {
    return postcss([
      postcssImport(),
      autoprefixer(),
      postcssURL({ url: 'inline' }),
    ])
      .process(style, { from })
      .then(output => {
        cache.styles[style] = csso.minify(output.css).css;
        callback(cache.styles[style]);
      });
  }
};

const resolveImage = node =>
  node.tag === 'img' && node.attrs && testURL(node.attrs.src);

const resolveInlineScript = (index, node) =>
  node.tag === 'script' && (!node.attrs || !node.attrs.src) && index;

const resolveInlineStyle = (index, node) => node.tag === 'style' && index;

const resolveScript = node =>
  node.tag === 'script' && node.attrs && testURL(node.attrs.src);

const resolveStyle = node =>
  node.tag === 'link' &&
  node.attrs &&
  node.attrs.rel === 'stylesheet' &&
  testURL(node.attrs.href);

const testURL = url => /^(https?:|)\/\//.test(url) || url;

const transformImage = (node, data) =>
  (node.attrs.src = `data:${filterMime(
    data.mime,
    data.from,
  )};base64,${data.buffer.toString('base64')}`);

const transformInlineScript = (node, data) =>
  processScript(
    node.content.join(''),
    data.from,
    output => (node.content = output),
  );

const transformInlineStyle = (node, data) =>
  processStyle(
    node.content.join(''),
    data.from,
    output => (node.content = output),
  );

const transformScript = (node, data) => {
  delete node.attrs.src;
  delete node.attrs.type;
  return processScript(
    data.buffer.toString('utf8'),
    data.from,
    output => (node.content = output),
  );
};

const transformStyle = (node, data) => {
  delete node.attrs.href;
  delete node.attrs.rel;
  node.tag = 'style';
  return processStyle(
    data.buffer.toString('utf8'),
    data.from,
    output => (node.content = output),
  );
};

require.main === module && main();

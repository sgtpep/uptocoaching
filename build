#!/usr/bin/env node
const child_process = require('child_process');
const footer = require('./lib/footer');
const fs = require('fs');
const header = require('./lib/header');
const path = require('path');

const bodyPath = directory => path.join(directory, 'body.html');

const build = directory =>
  fs.existsSync(buildPath(directory))
    ? require(`./${buildPath(directory)}`)(options(directory))
    : buildDefault(options(directory));

const buildDefault = options =>
  fs.existsSync(bodyPath(options.directory))
    ? [
        header(options),
        fs.readFileSync(bodyPath(options.directory), 'utf8'),
        footer(options),
      ]
        .map(text => text.trim())
        .join('\n')
    : undefined;

const buildPath = directory => path.join(directory, 'build.js');

const directories = () =>
  process.argv.length > 2
    ? process.argv.slice(2)
    : child_process
        .spawnSync(
          'find',
          [
            '-type',
            'd',
            '!',
            '-regex',
            String.raw`\./\(\..+\|node_modules\)\(\|/.+\)`,
          ],
          { encoding: 'utf8' },
        )
        .stdout.split('\n')
        .slice(0, -1);

const main = () =>
  directories().forEach(directory => {
    const html = build(directory);
    html === undefined ||
      fs.writeFileSync(path.join(directory, 'index.html'), html);
  });

const meta = directory => ({
  title: title(directory),
  ...(fs.existsSync(metaPath(directory))
    ? JSON.parse(fs.readFileSync(metaPath(directory)))
    : {}),
});

const metaPath = directory => path.join(directory, 'meta.json');

const options = directory =>
  (fs.existsSync('lib/options.js')
    ? require('./lib/options')
    : options => options)({
    base: path.relative(directory, __dirname) || '.',
    directory,
    meta: meta(directory),
    page: path.relative(__dirname, path.join(directory, '-')).replace(/-$/, ''),
  });

const title = directory =>
  fs.existsSync(bodyPath(directory))
    ? (fs
        .readFileSync(bodyPath(directory), 'utf8')
        .match(/<\s*h1(?:|\s.*?)>(.*?)<\s*\/\s*h1\s*>/is) || [])[1]
    : undefined;

require.main === module && main();
